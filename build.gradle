apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven-publish"

def publishVersion = "1.0.0-SNAPSHOT"

sourceSets {
	boot
	installer
	patchMaker
}

configurations {
	eclipseCP {
		dependencies {
			compile "org.ow2.asm:asm:5.1"
			compile "org.apache.logging.log4j:log4j-api:2.5"
			compile "org.apache.logging.log4j:log4j-core:2.5"
			compile "org.clojars.razum2um:jd-core-java:1.2"
			compile "com.fifesoft:rsyntaxtextarea:2.5.8"
			compile "org.reflections:reflections:0.9.10"
		}
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://clojars.org/repo/"
	}
}

dependencies {
	bootCompile sourceSets.main.output
	installerCompile "org.ow2.asm:asm:5.1"
	installerCompile "org.apache.logging.log4j:log4j-api:2.5"
	installerCompile "org.apache.logging.log4j:log4j-core:2.5"
	installerCompile sourceSets.boot.output
	installerCompile sourceSets.main.output
	patchMakerCompile "org.ow2.asm:asm:5.1"
	patchMakerCompile "org.clojars.razum2um:jd-core-java:1.2"
	patchMakerCompile "com.fifesoft:rsyntaxtextarea:2.5.8"
	patchMakerCompile "org.reflections:reflections:0.9.10"
	patchMakerCompile sourceSets.boot.output
	patchMakerCompile sourceSets.main.output
	testCompile sourceSets.boot.output
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		plusConfigurations += configurations.eclipseCP
	}
}

build {
	dependsOn bootClasses
	dependsOn installerClasses
	dependsOn patchMakerClasses
}

task runInstaller(type: JavaExec) {
	main = "com.github.zachdeibert.jlinq.installer.Main"
	classpath sourceSets.installer.runtimeClasspath
	// This could be fixed with LINQ
	List<String> paths = new ArrayList<String>()
	sourceSets.boot.runtimeClasspath.each {
		paths.add(it.getAbsolutePath())
	}
	jvmArgs "-Xbootclasspath/p:" + String.join(File.pathSeparator, paths.toArray(new String[0]))
	dependsOn bootClasses
	dependsOn installerClasses
}

task runPatchMaker(type: JavaExec) {
	main = "com.github.zachdeibert.jlinq.patchMaker.Main"
	classpath sourceSets.patchMaker.runtimeClasspath
	// This could be fixed with LINQ
	List<String> paths = new ArrayList<String>()
	sourceSets.boot.runtimeClasspath.each {
		paths.add(it.getAbsolutePath())
	}
	jvmArgs "-Xbootclasspath/p:" + String.join(File.pathSeparator, paths.toArray(new String[0]))
	dependsOn bootClasses
	dependsOn patchMakerClasses
}

task jarSrc(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task jarDoc(type: Jar) {
	classifier = "javadoc"
	from javadoc.destinationDir
	dependsOn javadoc
}

publishing {
	repositories {
		maven {
			url "build/maven"
		}
	}
	
	publications {
		main(MavenPublication) {
			from components.java
			groupId "com.github.zachdeibert"
			artifactId "JLINQ"
			version publishVersion
		}
		src(MavenPublication) {
			artifact jarSrc
			groupId "com.github.zachdeibert"
			artifactId "JLINQ"
			version publishVersion
		}
		javadoc(MavenPublication) {
			artifact jarDoc
			groupId "com.github.zachdeibert"
			artifactId "JLINQ"
			version publishVersion
		}
	}
}
